./src/action/action_factory.ts:            throw new Error(`Action ${action} not found - Aborting...`);
./src/action/assert_contains_action.ts:            throw Error(`Action - expected two parametrers\nassertContains "text" "full text"`);
./src/action/check/check_chain_dir_exists.ts:            throw new Error(`dirs not found: ${dirs.join(', ')}`)
./src/action/check/check_file_exists.ts:            throw new Error(`Which files should be checked?`)
./src/action/check/check_file_exists.ts:                        log.debug(`NOT A FILE: ${file}`)
./src/action/check/check_file_exists.ts:                    log.debug(`NOT FOUND: ${file}`)
./src/action/check/check_port.ts:            throw new Error("You must inform the port to check");
./src/action/check/check_port.ts:                throw new Error("Transport should be udp or tcp");
./src/action/check/check_port.ts:            throw Error(`Port already in use ${JSON.stringify(options)}`);
./src/action/check/check_url.ts:            throw new Error(`You must inform the URL to check`)
./src/action/check/check_url.ts:            throw new Error(`Invalid status - ${response?.status} for ${url}`)
./src/action/check/check_url.ts:            throw new Error(`Error checking ${url} - ${error}`)
./src/action/extract.ts:            throw new Error("You must inform the file to extract and the destination directory");
./src/action/git/clone.ts:            throw new Error(`Usage: ${this.oneLineExample}`)
./src/action/git/clone.ts:            log.debug(`skipping clone, ${destDir} already has content`)
./src/action/inspect.ts:                throw new Error(`${regexp} not found at ${src}`)
./src/action/json/json_get.ts:            throw Error(`Could not retrieve an entire array property - "${property}"`);
./src/action/json/json_get.ts:            throw Error(`Could not retrieve an entire object property - "${property}"`);
./src/action/levainShell.ts:            throw Error("No package for action levainShell")
./src/action/os/context_menu.ts:            throw Error("No package for action contextMenu")
./src/action/os/copy.ts:            throw Error("No package for action copy")
./src/action/os/copy.ts:                log.error(`Error in ${item}`);
./src/action/os/remove_from_registry.ts:            throw new Error("Action - removeFromRegistry - You should inform at least one package to be removed")
./src/action/property/property_set.ts:            throw Error(`Missing parameters in "propertySet ${parameters.join(' ')}".\nCorrect usage:\npropertySet [--ifNotExists] filename property value`)
./src/cmd/list_command.ts:        log.info(`= Repository:`)
./src/cmd/list_command.ts:            log.info(`  no packages found`)
./src/cmd/list_command.ts:                log.info(`  ${filteredPackageCount} ${repoPackageCountText}package${repoPluralChar} found`)
./src/cmd/list_command.ts:                log.info(`== Package${filteredPluralChar}`);
./src/cmd/list_command.ts:                log.info(`${searchText} - Unable to list some packages`)
./src/cmd/list_command.ts:                    log.info(`${searchText} - Unable to list similar packages too`)
./src/cmd/list_command.ts:                    log.info(`${searchText} - Listing similar packages`)
./src/cmd/shell.ts:        log.debug(`shell must check for updates? ${this.config.shellCheckForUpdate}`)
./src/cmd/shell.ts:                    throw new Error(`levainShell action is not allowed here. Check your recipe - pkg: ${curDirPkg.name} action: ${action}`)
./src/lib/cli_util.ts:            log.info("Ok, aborting...");
./src/lib/config.ts:                log.debug(`Shell path does not exist - ${this._shellPath}`)
./src/lib/config.ts:                log.debug(`Shell path must be the executable - ${this._shellPath}`)
./src/lib/config.ts:            log.warning(`** Changing shell path: ${this._shellPath} => ${shellPath}`);
./src/lib/config.ts:            log.warning(`** Changing default package: ${this._defaultPackage} => ${pkgName}`);
./src/lib/config.ts:            log.debug(`saving changed config`)
./src/lib/config.ts:        log.debug(`saved ${fileName}`);
./src/lib/config.ts:                log.error(`Error reading config - ${filename}`);
./src/lib/config.ts:                log.debug(`Checking home at ${home}`);
./src/lib/config.ts:                    log.debug(`${home} not available`);
./src/lib/extract/extractor.ts:        this.feedback.reset(`# ${file} in ${timer.humanize()}`)
./src/lib/extract/extractor.ts:        log.debug(`- extracted in ${timer.humanize()}`);
./src/lib/fs/file_cache.ts:            log.debug(`Error: ${error}`)
./src/lib/fs/file_cache.ts:            log.debug(`Cache - size does not match - ${src.size} != ${cacheInfo.size}`)
./src/lib/fs/file_cache.ts:            log.debug(`Cache - mtime does not match - ${src.motificationTime?.getTime()} != ${cacheInfo.mtime?.getTime()}`)
./src/lib/fs/file_utils.ts:                    log.debug(`Error reading ${filePath}`)
./src/lib/fs/file_utils.ts:            console.debug(`Waiting for Deno.resources to close ${JSON.stringify(Deno.resources())}`)
./src/lib/fs/file_utils.ts:            log.debug(`Cannot create a file in ${dir}`)
./src/lib/fs/file_utils.ts:            throw Error(`Reader undefined`)
./src/lib/fs/file_utils.ts:                    throw Error(`Copy size does not match ${r.size} => ${dst.size}`)
./src/lib/fs/file_utils.ts:                log.debug(`Size ok for ${dstFile}`)
./src/lib/fs/file_utils.ts:                    log.debug(`Timestamps preserved - ${dstFile}`)
./src/lib/fs/file_utils.ts:                    log.debug(`Could not preserve timestamps - ${dstFile}`)
./src/lib/fs/file_utils.ts:                log.error(`Error ${error}`)
./src/lib/fs/file_utils.ts:        throw Error(`Unable to copy to ${dstFile}`)
./src/lib/fs/file_utils.ts:            throw new Deno.errors.NotFound(`File ${filePath} does not exist`)
./src/lib/fs/file_utils.ts:            console.error(`Error with ${fileUri}`)
./src/lib/io/file_reader.ts:            throw Error(`File ${this.filePath} does not exist`)
./src/lib/io/file_reader.ts:        log.debug(`Reading ${this.filePath}`)
./src/lib/io/file_reader.ts:        log.debug(`Closing ${this.filePath}`)
./src/lib/io/file_writer.ts:        log.debug(`Writing to ${this.tempPath}`)
./src/lib/io/file_writer.ts:        log.debug(`Closing ${this.tempPath}`)
./src/lib/io/file_writer.ts:            log.debug(`Removing ${this.filePath}`)
./src/lib/io/file_writer.ts:        log.debug(`Moving ${this.tempPath} => ${this.filePath}`)
./src/lib/io/http_reader.ts:        log.debug(`Reading ${this.url}`)
./src/lib/io/http_reader.ts:        log.debug(`Closing ${this.url}`)
./src/lib/logger/console_and_file_logger.ts:                log.warning(`Could not write to log file ${logFile}`)
./src/lib/logger/console_and_file_logger.ts:            log.debug(`Cannot create a file in ${logFile}`)
./src/lib/os/os_shell.ts:        //     throw new Error("No package");
./src/lib/os/os_shell.ts:            throw new Error("Unable to load dependencies for a Levain shell. Aborting...");
./src/lib/os/os_shell.ts:                throw new Error(`levainShell action is not allowed here. Check your recipe - pkg: ${pkg.name} action: ${action}`)
./src/lib/os/os_shell.ts:            throw new Error("CMD terminated with code " + status.code);
./src/lib/os/os_shell.ts:        //     log.debug("shell initiated");
./src/lib/os/os_utils.ts:            log.debug(`Hostname not found. Looked for env vars ${hostEnvStrings.join()}`)
./src/lib/os/powershell.ts:            throw new Error(`Powershell.run(${script}) terminated with code ${status?.code}\n${stderrOutput}`);
./src/lib/package/package_manager.ts:            this.feedback.start(`# Resolve ${pkgNames}...`);
./src/lib/package/package_manager.ts:            this.feedback.reset(`# Resolve ${pkgNames} -> Done`);
./src/lib/package/package_manager.ts:            log.debug("# Package list (in order):");
./src/lib/package/package_manager.ts:            log.debug("Packages seen:");
./src/lib/package/package_manager.ts:        log.debug(`## resolving package ${pkgName} in ${repo.describe()}`)
./src/lib/package/package_manager.ts:            log.debug("PACKAGE NOT FOUND: " + pkgName);
./src/lib/parse_args.ts:                throw new Error("ERROR: Unknown option " + v);
./src/lib/parse_args.ts:                    throw new Error(`Use option ${key} only once`);
./src/lib/parse_args.ts:        throw `Quote mismatch - ${args.join(" ")}`;
./src/lib/parse_args.ts:        throw `Quote mismatch - ${args.join(" ")}`;
./src/lib/releases/levain_releases.ts:                        reject(Error("No release found"))
./src/lib/releases/levain_releases.ts:                        log.error(`Error looking for Levain releases ${error}`)
./src/lib/releases/levain_releases.ts:                    log.error(`Error looking for Levain releases ${error}`)
./src/lib/releases/levain_releases.ts:            throw Error(`No zip for undefined version`)
./src/lib/releases/levain_releases.ts:                        log.debug(`404 at latest release`)
./src/lib/releases/levain_releases.ts:                            log.debug(`1-Error - ${JSON.stringify(error)}`)
./src/lib/releases/levain_releases.ts:                            log.debug(`Error looking for Levain latest release ${error}`)
./src/lib/releases/levain_releases.ts:                    log.debug(`2-Error - ${JSON.stringify(error)}`)
./src/lib/releases/levain_releases.ts:                    log.debug(`Error looking for Levain latest release ${error}`)
./src/lib/releases/levain_releases.ts:                        log.debug(`No latest release found`)
./src/lib/releases/levain_releases.ts:                        log.debug(`Invalid release tag format - ${release.tag_name}`)
./src/lib/releases/levain_releases.ts:                    log.debug(`Error - ${error}`)
./src/lib/releases/levain_releases.ts:            log.debug(`My version does not allow updates - ${LevainVersion.levainVersion}`)
./src/lib/releases/levain_releases.ts:                    log.info("We are ignoring the Levain update. We will ask you again another day.")
./src/lib/releases/levain_releases.ts:                    log.info("Ok. We will ask again later.")
./src/lib/releases/levain_releases.ts:            log.info("Upgrading Levain")
./src/lib/releases/levain_releases.ts:            log.debug(`Error ${error}`)
./src/lib/releases/levain_releases.ts:            log.info(`Ignoring Levain updates`)
./src/lib/releases/levain_releases.ts:            log.debug(`No update needed - no new version`)
./src/lib/releases/levain_releases.ts:            log.debug(`No update needed - vHEAD version`)
./src/lib/releases/levain_releases.ts:            log.debug(`No update needed - latest version ${newVersion} isn't newer than my version ${myVersion}`)
./src/lib/releases/levain_releases.ts:        log.debug(`UPDATE needed - my version ${myVersion} is older than ${newVersion}`)
./src/lib/releases/levain_releases.ts:        log.info("We have a new Levain release available!")
./src/lib/releases/levain_releases.ts:        log.info(`- Your version: ${LevainVersion.levainVersion}`)
./src/lib/releases/levain_releases.ts:        log.info(`-  New version: ${await this.latestVersion()}`)
./src/lib/releases/levain_releases.ts:        log.debug(`Levain releases dir ${releasesDir}`)
./src/lib/releases/levain_releases.ts:        log.debug(`Checking (1) Levain at ${newVersionDir}`)
./src/lib/releases/levain_releases.ts:                log.debug(`Extracting Levain to ${releasesDir}`)
./src/lib/releases/levain_releases.ts:                log.error(`Unable to extract Levain version - ignoring upgrade (for now) ${JSON.stringify(error)}`)
./src/lib/releases/levain_releases.ts:        log.debug(`Checking (2) Levain at ${newVersionDir}`)
./src/lib/releases/levain_releases.ts:            log.error("Unable to load new Levain version - ignoring upgrade (for now)")
./src/lib/releases/levain_releases.ts:        log.info("Restarting Levain for upgrade")
./src/lib/repository/file_system_repository.ts:            log.debug(`FSRepo: Root=${this.rootDir} - already initialized`);
./src/lib/repository/file_system_repository.ts:            throw new Error(`addRepo - dir not found: ${this.rootDir}`)
./src/lib/repository/file_system_repository.ts:            throw new Error(`addRepo - repository should exist and be a dir: ${this.rootDir}`)
./src/lib/repository/file_system_repository.ts:        log.debug(`resolvePackage - looking for ${packageName} in ${this.describe()}`)
./src/lib/repository/file_system_repository.ts:            log.debug(`${this.name}: found package ${packageName} => ${pkg.toString()}`);
./src/lib/repository/file_system_repository.ts:            log.debug(`${this.name}: package ${packageName} not found in ${this.describe()}`);
./src/lib/repository/file_system_repository.ts:            log.debug(`Known packages: ${this._packages}`)
./src/lib/repository/file_system_repository.ts:            log.debug(`# readPackages: rootDir not found ${this.rootDir}`);
./src/lib/repository/file_system_repository.ts:        this.feedback.start(`# Scanning ${this.rootDir}...`);
./src/lib/repository/file_system_repository.ts:        this.feedback.reset(`Found ${packages.length} packages in ${this.rootDir} (${timer.humanize()})`)
./src/lib/repository/file_system_repository.ts:            log.debug(`ignoring ${dirname}`)
./src/lib/repository/file_system_repository.ts:            log.debug(`not crawling ${dirname} - can't read`)
./src/lib/repository/file_system_repository.ts:            log.debug(`error reading ${dirname} - ${error}`)
./src/lib/repository/file_system_repository.ts:            log.debug(`not crawling ${dirname} - no entries`)
./src/lib/repository/file_system_repository.ts:                log.debug(`not crawling ${fullUri} - can't read`)
./src/lib/repository/file_system_repository.ts:                    log.debug(`skipping ${fullUri}, more then ${maxLevels} levels deep`)
./src/lib/repository/file_system_repository.ts:            log.error(`!!! error loading package ${yamlFile}: ${error}`)
./src/lib/repository/git_repository.ts:            throw Error(`${this.name} not loaded`)
./src/lib/repository/git_repository.ts:            throw Error(`${this.name} not loaded`)
./src/lib/repository/registry.ts:            throw Error(`Cannot find package ${pkg.fullPath}`)
./src/lib/repository/registry.ts:        log.debug(`Registry.remove ${name} ${this.rootDir}`)
./src/lib/repository/registry.ts:            log.debug(`Trying to remove ${it}`)
./src/lib/repository/repository_factory.ts:            log.debug(`Reusing repo ${repo.describe()}`)
./src/lib/repository/zip_repository.ts:            throw Error(`${this.name} not loaded`)
./src/lib/repository/zip_repository.ts:            throw Error(`${this.name} not loaded`)
./src/lib/user_info/userinfo_util.ts:            throw new Error(`Invalid FULL NAME - ${validationResult}`);
./src/lib/utils/git_utils.ts:                log.error(`git error - try ${tries} - ${error}`)
./src/lib/utils/git_utils.ts:        throw Error(`Unable to GIT PULL ${workingDir}`)
./src/lib/utils/git_utils.ts:            throw new Error(`Invalid git url - ${url}`)
./src/lib/utils/git_utils.ts:                log.debug(`Looking for .git at ${gitdir}`)
./src/lib/utils/git_utils.ts:                    log.debug(`Found .git at ${gitdir} - using ${dir}`)
./src/lib/utils/git_utils.ts:            log.debug(`Parent: ${dir}`)
./src/lib/utils/json_utils.ts:                throw Error(`File ${filename} not found`);
./src/lib/utils/json_utils.ts:                throw Error(`File ${fileName} not found`);
./src/lib/utils/json_utils.ts:                    // log.debug(`new array for ${item}`);
./src/lib/utils/json_utils.ts:                    // log.debug(`new object for ${item}`);
./src/lib/utils/json_utils.ts:            throw Error(`Target must be an array: ${obj}`);
./src/lib/utils/json_utils.ts:                throw Error(`Invalid array task ${item}`);
./src/lib/utils/version_number.ts:            throw new Error(`Invalid version number - ${this.versionNumber}`)
./src/lib/var_resolver.ts:                    throw new Error(`Var ${varName} not defined`)
./src/lib/var_resolver.ts:                    throw new Error(`Levain attribute ${vName} is undefined`);
./testdata/killProcess/levainTestWaitForever.ts:    log.info("waiting...")
