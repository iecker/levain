name: Create a new release

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      releaseNumber:
        description: 'Release number'     
        required: true

env:
  DENO_ROOT_PATH: ${{ runner.temp }}/deno
  LEVAIN_VERSION: ${{ github.event.inputs.releaseNumber }} 
  LEVAIN_RELEASE_PATH: ${{ runner.temp }}/levain-$LEVAIN_VERSION

jobs:
  createRelease:
    runs-on: ubuntu-latest

    steps:
      - name: Check parameter
        run: |
          # Check parameter
          version=$LEVAIN_VERSION
          if [[ $version =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo Version v${version};
          else
            echo Invalid version number - $version;
            echo
            echo You must use the pattern
            echo major.minor.patch
            echo
            echo Examples:
            echo 0.20.1
            echo 1.0.3
            echo 2.5.0
            echo

            exit 1
          fi

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v2

      - name: Git config commmit user
        run: |
          # Git config commmit user
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git config pull.rebase true

      - name: Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: bash $GITHUB_WORKSPACE/githubScripts/tag-release.sh $LEVAIN_VERSION

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v$LEVAIN_VERSION
          release_name: v$LEVAIN_VERSION
          commitish: master
          draft: false
          prerelease: true

      - name: Get Deno
        run: |
          mkdir -p $DENO_ROOT_PATH
          echo Deno Windows
          bash $GITHUB_WORKSPACE/githubScripts/get-deno.sh $DENO_ROOT_PATH/windows Windows
          echo Deno Linux
          bash $GITHUB_WORKSPACE/githubScripts/get-deno.sh $DENO_ROOT_PATH/linux Linux

      - name: Wait release - Timeout 5 min
        run: timeout 300 bash -c 'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' https://api.github.com/repos/jmoalves/levain/releases/tags/v$LEVAIN_VERSION)" != "200" ]]; do echo Waiting...; sleep 5; done' || false

      - name: Get Levain release
        run: |
          rm -rf $LEVAIN_RELEASE_PATH
          mkdir -p $LEVAIN_RELEASE_PATH
          bash $GITHUB_WORKSPACE/githubScripts/get-levain-release.sh $LEVAIN_VERSION $LEVAIN_RELEASE_PATH

      - name: Clean Levain release
        run: |
          bash $GITHUB_WORKSPACE/githubScripts/clean-levain-release.sh $LEVAIN_RELEASE_PATH

      - name: Levain embedded binaries
        run: |
          bash $GITHUB_WORKSPACE/githubScripts/levain-embedded-binaries.sh $LEVAIN_RELEASE_PATH $DENO_ROOT_PATH/windows

      - name: Levain bundle
        run: |
          bash $GITHUB_WORKSPACE/githubScripts/levain-bundle.sh $LEVAIN_RELEASE_PATH $DENO_ROOT_PATH/linux/deno

      - name: Levain package
        run: |
          bash $GITHUB_WORKSPACE/githubScripts/levain-package.sh $LEVAIN_RELEASE_PATH levain-v$levainVersion-windows-x86_64.zip

      - name: Upload assets
        run: |
          bash $GITHUB_WORKSPACE/githubScripts/asset-upload.sh $LEVAIN_VERSION levain-v$levainVersion-windows-x86_64.zip application/zip
          bash $GITHUB_WORKSPACE/githubScripts/asset-upload.sh $LEVAIN_VERSION levain-v$levainVersion-windows-x86_64.zip.sha256 text/plain
