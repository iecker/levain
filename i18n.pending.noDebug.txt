./src/action/action_factory.ts:            throw new Error(`Action ${action} not found - Aborting...`);
./src/action/assert_contains_action.ts:            throw Error(`Action - expected two parametrers\nassertContains "text" "full text"`);
./src/action/assert_contains_action.ts:            const defaultMessage = `Could not find "${text}" in "${fulltext}"`;
./src/action/backup_file.ts:            throw `You must inform the file to backup - ${parameters}`;
./src/action/check/check_chain_dir_exists.ts:            throw new Error(`dirs not found: ${dirs.join(', ')}`)
./src/action/check/check_chain_dir_exists.ts:            throw "Inform the dirs that at least one should exist"
./src/action/check/check_file_exists.ts:            throw new Error(`Which files should be checked?`)
./src/action/check/check_file_exists.ts:            message = `Expected file to exist:\n`;
./src/action/check/check_file_exists.ts:            message = `Expected one of the following files to exist:\n`
./src/action/check/check_port.ts:            throw new Error("You must inform the port to check");
./src/action/check/check_port.ts:                throw new Error("Transport should be udp or tcp");
./src/action/check/check_port.ts:            throw Error(`Port already in use ${JSON.stringify(options)}`);
./src/action/check/check_url.ts:            throw new Error(`You must inform the URL to check`)
./src/action/check/check_url.ts:            throw new Error(`Invalid status - ${response?.status} for ${url}`)
./src/action/check/check_url.ts:            throw new Error(`Error checking ${url} - ${error}`)
./src/action/defaultPackage.ts:            throw `You must inform one package ${parameters}`;
./src/action/extract.ts:            throw new Error("You must inform the file to extract and the destination directory");
./src/action/git/clone.ts:            throw new Error(`Usage: ${this.oneLineExample}`)
./src/action/inspect.ts:                throw new Error(`${regexp} not found at ${src}`)
./src/action/inspect.ts:            throw "What do you need to search?"
./src/action/inspect.ts:            throw "Where should we put the result?"
./src/action/inspect.ts:            throw "There is a mismatch between --regExp and --saveVar"
./src/action/inspect.ts:            throw "Inform the source file"
./src/action/inspect.ts:                throw "You must use regExps - " + args.regExp[x];
./src/action/json/json_get.ts:            throw Error(`Could not retrieve an entire array property - "${property}"`);
./src/action/json/json_get.ts:            throw Error(`Could not retrieve an entire object property - "${property}"`);
./src/action/levainShell.ts:            throw Error("No package for action levainShell")
./src/action/os/add_path.ts:            throw "You must inform the path";
./src/action/os/context_menu.ts:            throw "contextMenu - You must inform the 'folders' sub action";
./src/action/os/context_menu.ts:            throw "contextMenu - You must inform the 'id' option";
./src/action/os/context_menu.ts:            throw "contextMenu - You must inform the 'name' option";
./src/action/os/context_menu.ts:            throw "contextMenu - You must inform the 'cmd' option";
./src/action/os/context_menu.ts:            throw "contextMenu - The 'id' option must NOT contain spaces";
./src/action/os/context_menu.ts:            throw Error("No package for action contextMenu")
./src/action/os/copy.ts:            throw Error("No package for action copy")
./src/action/os/copy.ts:            throw "Action - copy - You must inform the destination";
./src/action/os/copy.ts:            throw "Action - copy - You must inform the source(s)";
./src/action/os/copy.ts:            throw "Action - copy - Unable to copy multiple sources to a single file";
./src/action/os/copy.ts:                log.error(`Error in ${item}`);
./src/action/os/copy.ts:            log.error(`ERROR: COPY ${src} => ${dst} ${JSON.stringify(err)}`);
./src/action/os/mkdir.ts:            throw "Action - mkdir - You should inform a single directory";
./src/action/os/mkdir.ts:            log.warning(`MKDIR - ignoring --compact - Windows only`);
./src/action/os/mkdir.ts:                throw `Action - mkdir - ${dirname} already exists and it is not a directory`;
./src/action/os/remove_from_registry.ts:            throw new Error("Action - removeFromRegistry - You should inform at least one package to be removed")
./src/action/os/set_env.ts:            throw "You must inform the var and the value";
./src/action/property/property_set.ts:            throw Error(`Missing parameters in "propertySet ${parameters.join(' ')}".\nCorrect usage:\npropertySet [--ifNotExists] filename property value`)
./src/action/shell_path.ts:            throw `You must inform the shell path ${parameters}`
./src/action/template.ts:            throw "What do you need to replace?"
./src/action/template.ts:            throw "What do you need to replace with?"
./src/action/template.ts:            throw "There is a mismatch between --replace and --with"
./src/action/template.ts:            throw `Inform the template file and the destination file. ${args._}`
./src/cmd/install.ts:                if (!answer || !["Y", "YES"].includes(answer.toUpperCase())) {
./src/cmd/install.ts:             * However, this "tempDir" change could EASILY BREAK all the recipes
./src/cmd/shell.ts:                    throw new Error(`levainShell action is not allowed here. Check your recipe - pkg: ${curDirPkg.name} action: ${action}`)
./src/cmd/shell.ts:    readonly oneLineExample = "  shell <optional package name>"
./src/lib/cli_util.ts:        if (!answer || !["Y", "YES"].includes(answer.toUpperCase())) {
./src/lib/cli_util.ts:            log.info("Ok, aborting...");
./src/lib/config.ts:            log.warning(`** Changing shell path: ${this._shellPath} => ${shellPath}`);
./src/lib/config.ts:            log.warning(`** Changing default package: ${this._defaultPackage} => ${pkgName}`);
./src/lib/config.ts:                log.error(`Error reading config - ${filename}`);
./src/lib/config.ts:                throw `No valid levainHome in your list\n-> ${args["levainHome"]}`;
./src/lib/extract/extractor.ts:                    throw `You should not ask for --strip if there are more than one directory`;
./src/lib/extract/extractor_factory.ts:        throw `${src} - file not supported.`;
./src/lib/extract/untar_extractor.ts:            throw `${Deno.build.os} not supported`;
./src/lib/extract/untar_extractor.ts:            throw "CMD terminated with code " + status.code;
./src/lib/fs/file_utils.ts:            throw Error(`Reader undefined`)
./src/lib/fs/file_utils.ts:                    throw Error(`Copy size does not match ${r.size} => ${dst.size}`)
./src/lib/fs/file_utils.ts:                log.error(`Error ${error}`)
./src/lib/fs/file_utils.ts:        throw Error(`Unable to copy to ${dstFile}`)
./src/lib/fs/file_utils.ts:            throw new Deno.errors.NotFound(`File ${filePath} does not exist`)
./src/lib/fs/file_utils.ts:            console.error(`Error with ${fileUri}`)
./src/lib/io/file_reader.ts:            throw Error(`File ${this.filePath} does not exist`)
./src/lib/logger/console_and_file_logger.ts:                log.warning(`Could not write to log file ${logFile}`)
./src/lib/os/os_shell.ts:        //     throw new Error("No package");
./src/lib/os/os_shell.ts:            throw new Error("Unable to load dependencies for a Levain shell. Aborting...");
./src/lib/os/os_shell.ts:                throw new Error(`levainShell action is not allowed here. Check your recipe - pkg: ${pkg.name} action: ${action}`)
./src/lib/os/os_shell.ts:            throw new Error("CMD terminated with code " + status.code);
./src/lib/os/os_utils.ts:            //throw `TempDir not found. Looked for env vars ${tempDirEnvVars.join()}`
./src/lib/os/os_utils.ts:            throw `User not found. Looked for env vars ${userEnvStrings.join()}`
./src/lib/os/os_utils.ts:            throw `Home folder not found. Looked for env vars ${homeEnvStrings.join()}`
./src/lib/os/os_utils.ts:            const message = `${OsUtils.getOs()} not supported`
./src/lib/os/os_utils.ts:            throw `********** Unknown command type ${typeof command}`
./src/lib/os/os_utils.ts:            throw `Error ${status.code} running "${command}\n${stderrOutput}"`;
./src/lib/os/powershell.ts:            throw new Error(`Powershell.run(${script}) terminated with code ${status?.code}\n${stderrOutput}`);
./src/lib/package/package_manager.ts:            let msg = `Circular dependencies found at ${pkgName}`;
./src/lib/parse_args.ts:                throw new Error("ERROR: Unknown option " + v);
./src/lib/parse_args.ts:                    throw new Error(`Use option ${key} only once`);
./src/lib/parse_args.ts:            throw `Too many quotes - ${args}`;
./src/lib/parse_args.ts:        throw `Quote mismatch - ${args.join(" ")}`;
./src/lib/parse_args.ts:        throw `Quote mismatch - ${args.join(" ")}`;
./src/lib/repository/file_system_repository.ts:            return description.replace(/\)/, ` resolved from ${this.rootDir})`)
./src/lib/repository/file_system_repository.ts:            throw new Error(`addRepo - dir not found: ${this.rootDir}`)
./src/lib/repository/file_system_repository.ts:            throw new Error(`addRepo - repository should exist and be a dir: ${this.rootDir}`)
./src/lib/repository/file_system_repository.ts:            log.error(`!!! error loading package ${yamlFile}: ${error}`)
./src/lib/repository/git_repository.ts:            throw Error(`${this.name} not loaded`)
./src/lib/repository/git_repository.ts:            throw Error(`${this.name} not loaded`)
./src/lib/repository/registry.ts:            throw Error(`Cannot find package ${pkg.fullPath}`)
./src/lib/repository/repository_factory.ts:            throw "RepoFactory with no repoURI"
./src/lib/repository/zip_repository.ts:            let message = `Zip not found: ${this.absoluteURI}`
./src/lib/repository/zip_repository.ts:                message += ` resolved from ${rootUrl}`
./src/lib/repository/zip_repository.ts:            return description.replace(/\)/, ` resolved from ${this.rootUrl})`)
./src/lib/repository/zip_repository.ts:            throw Error(`${this.name} not loaded`)
./src/lib/repository/zip_repository.ts:            throw Error(`${this.name} not loaded`)
./src/lib/user_info/inputAccentWorkaround/inputNomeComAcentos.ts:    "What's your name ã? (press return to confirm default value) ",
./src/lib/user_info/inputAccentWorkaround/inputNomeComAcentos.ts:// console.log(`Name: ${nameDeno} ${decodedDenoName}`)
./src/lib/user_info/inputAccentWorkaround/inputNomeComAcentos.ts:console.log(`NameDeno: ${nameDeno} ${nameDenoSemAcentos} ${encodedDenoName}`)
./src/lib/user_info/inputAccentWorkaround/inputNomeComAcentos.ts:console.log(`encoded ã: ${encodedA}`)
./src/lib/user_info/inputAccentWorkaround/inputNomeComAcentos.ts:console.log(`nameCliffy: ${nameCliffy} ${encodedCliffyName}`)
./src/lib/user_info/inputAccentWorkaround/validateWithCliffy.ts:        message: "What's your github user name?",
./src/lib/user_info/inputAccentWorkaround/validateWithCliffy.ts:            return `Value must be longer then 3 but has a length of ${text.length}.`
./src/lib/user_info/inputAccentWorkaround/validateWithCliffy.ts:        const hint = "Only valid characters, please";
./src/lib/user_info/userinfo_util.ts:            throw new Error(`Invalid FULL NAME - ${validationResult}`);
./src/lib/user_info/validators/validators.ts:            return `Length must be at least ${this.minLength} but is ${text?.length}.`
./src/lib/user_info/validators/validators.ts:        const hint = "Only valid characters, please";
./src/lib/utils/git_utils.ts:                log.error(`git error - try ${tries} - ${error}`)
./src/lib/utils/git_utils.ts:        throw Error(`Unable to GIT PULL ${workingDir}`)
./src/lib/utils/git_utils.ts:            throw new Error(`Invalid git url - ${url}`)
./src/lib/utils/json_utils.ts:                throw Error(`File ${filename} not found`);
./src/lib/utils/json_utils.ts:                throw Error(`File ${fileName} not found`);
./src/lib/utils/json_utils.ts:        throw Error(`We must not arrive here...`);
./src/lib/utils/json_utils.ts:            throw Error(`Target must be an array: ${obj}`);
./src/lib/utils/json_utils.ts:                throw Error(`Invalid array task ${item}`);
./src/lib/utils/utils.ts:    throw "No home for levain. Do you have a refrigerator?";
./src/lib/utils/version_number.ts:            throw new Error(`Invalid version number - ${this.versionNumber}`)
./src/lib/var_resolver.ts:                    throw new Error(`Var ${varName} not defined`)
./src/lib/var_resolver.ts:                    throw new Error(`Levain attribute ${vName} is undefined`);
./testdata/killProcess/levainTestWaitForever.ts:    log.info("waiting...")
